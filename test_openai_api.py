# -*- coding: utf-8 -*-
"""Test_OpenAI_API.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eMEnqPpAuMwejWWyy-mvav0LB_w9DnEw

# Test Notebook OpenAI API
Learning: Kostet Geld, man braucht Guthaben im OpenAI Konto
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install --upgrade openai

"""Now, you can use the `OpenAI` client to interact with the API. Remember to set your API key securely.

It's highly recommended to store your API key using Colab's Secrets feature to keep it safe.

1.  On the left sidebar in Colab, click on the "üîë Secrets" tab.
2.  Click on "Add new secret".
3.  In the "Name" field, type `OPENAI_API_KEY`.
4.  In the "Value" field, paste your OpenAI API key.
5.  Make sure the "Notebook access" toggle is enabled for your current notebook.

Once you've added the secret, the following code will be able to access your API key securely.
"""

from openai import OpenAI
from google.colab import userdata

try:
  # Access your API key securely from Colab secrets
  client = OpenAI(api_key=userdata.get('OPENAI_API_KEY'))

  response = client.chat.completions.create(
    model="gpt-3.5-turbo",  # You can choose a different model
    messages=[
      {"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "Write a short poem about the ocean."}
    ],
    max_tokens=100
  )
  print(response.choices[0].message.content)

except Exception as e:
  print(f"An error occurred: {e}")
  print("Please ensure your API key is correct and stored as a secret named 'OPENAI_API_KEY' in Colab.")
  print("Also, verify that 'Notebook access' is enabled for this secret.")

"""# Gemini AI
Es wird deutlich, dass man f√ºr die Nutzung der OpenAI API ein finanzielles Kontigent braucht. Google AI bietet grunds√§tzlich ein Startpaket, das man zum Testen nutzen kann.

To use the Gemini API, you'll need an API key. If you don't already have one, create a key in Google AI Studio. The Gemini API offers a free tier, which is great for learning and demonstrating.

In Colab, add the key to the secrets manager under the "üîë" in the left panel. Give it the name `GOOGLE_API_KEY`. Then pass the key to the SDK:
"""

# Import the Python SDK
import google.generativeai as genai
# Used to securely store your API key
from google.colab import userdata

GOOGLE_API_KEY=userdata.get('GOOGLE_API_KEY')
genai.configure(api_key=GOOGLE_API_KEY)

"""Before you can make any API calls, you need to initialize the Generative Model."""

# Initialize the Gemini API
gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')

"""Now you can make API calls. For example, to generate a poem:"""

response = gemini_model.generate_content('Write a poem about the moon.')
print(response.text)

"""Hier finden Sie die Preisliste f√ºr die Preise der einzelnen Modelle, die Google anbietet: https://ai.google.dev/gemini-api/docs/pricing?hl=de
Versuchen Sie f√ºr Ihren Anwendungsfall, den Sie konkret definieren sollten, zun√§chst √ºber eine Recherche das passende Modell zu finden. Wenn Sie diese Modelle in einem automatisierten Betrieb nutzen wollen, sollten Sie immer Kosten und Nutzen abw√§gen. Wie viele Anfragen haben Sie pro Tag, lohnt sich das?
"""

# Test mit Meeting Notes zusammenfassen

## Beispiel: zahlen q3 durchgegangen, umsatz leicht unter plan. hauptgrund sind verz√∂gerungen in frankreich. vertrieb will zus√§tzliche ressourcen beantragen. n√§chste steps: daten tiefer analysieren, peer bringt vorschlag ins n√§chste meeting.
## Wie bewerten Sie den Output, wie w√ºrden Sie nun weiter vorgehen, um das Ganze zu optimieren?

from ipywidgets import Textarea
from IPython.display import display

print("Please paste your meeting notes below:")
meeting_notes_input = Textarea(
    value='',
    placeholder='Paste meeting notes here...',
    description='Meeting Notes:',
    disabled=False,
    layout={'width': '800px', 'height': '200px'}
)

display(meeting_notes_input)

# Get the meeting notes from the text area
meeting_notes = meeting_notes_input.value

# Create a prompt for the Gemini API
prompt = f"""Please summarize the following meeting notes.
Extract the key decisions, action items, and main discussion points.

Meeting Notes:
{meeting_notes}
"""

# Call the Gemini API
try:
  response = gemini_model.generate_content(prompt)
  summary = response.text
  print("\nMeeting Summary:")
  print(summary)

except Exception as e:
  print(f"An error occurred while calling the Gemini API: {e}")
  print("Please ensure your GOOGLE_API_KEY is correct and you have access to the Gemini API.")